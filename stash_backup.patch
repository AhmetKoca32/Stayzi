diff --git a/.DS_Store b/.DS_Store
index 2ac3f77..c394af9 100644
Binary files a/.DS_Store and b/.DS_Store differ
diff --git a/backend_fastapi/app/crud/listing.py b/backend_fastapi/app/crud/listing.py
index de76b29..85abd92 100644
--- a/backend_fastapi/app/crud/listing.py
+++ b/backend_fastapi/app/crud/listing.py
@@ -1,10 +1,23 @@
 from sqlalchemy.orm import Session
 from app.models.listing import Listing
 from app.schemas.listing import ListingCreate
+from app.models.amenity import Amenity
 
 
+# app/crud/listing.py
+
 def create_listing(db: Session, listing: ListingCreate, user_id: int):
-    db_listing = Listing(**listing.dict(), user_id=user_id)
+    amenity_ids = [a.id for a in listing.amenities] if listing.amenities else []
+
+    # ✅ amenity id'lerine göre veritabanından objeleri alıyoruz
+    amenities = db.query(Amenity).filter(Amenity.id.in_(amenity_ids)).all()
+
+    db_listing = Listing(
+        **listing.dict(exclude={"amenities"}),
+        user_id=user_id,
+        amenities=amenities
+    )
+
     db.add(db_listing)
     db.commit()
     db.refresh(db_listing)
@@ -37,7 +50,41 @@ def update_listing(db: Session, listing_id: int, listing: ListingCreate):
             setattr(db_listing, key, value)
         db.commit()
         db.refresh(db_listing)
-    return db_listing 
+    return db_listing
+
+from app.crud.user import get_user_by_id
+
+def get_listing_with_host(db: Session, listing_id: int):
+    listing = db.query(Listing).filter(Listing.id == listing_id).first()
+    if not listing:
+        return None
+
+    amenities_names = [a.name for a in listing.amenities] if listing.amenities else []
+    user = get_user_by_id(db, listing.user_id)
+
+    return {
+        "id": listing.id,
+        "title": listing.title,
+        "description": listing.description,
+        "price": listing.price,
+        "location": listing.location,
+        "lat": listing.lat,
+        "lng": listing.lng,
+        "home_type": listing.home_type,
+        "host_languages": listing.host_languages,
+        "image_urls": listing.image_urls,
+        "created_at": listing.created_at,
+        "average_rating": listing.average_rating,
+        "home_rules": listing.home_rules,
+        "capacity": listing.capacity,
+        "amenities": amenities_names,
+        "host": {
+            "id": user.id,
+            "name": user.name,
+            "surname": user.surname,
+            "profile_image": user.profile_image
+        } if user else None
+    }
 
 
 
diff --git a/backend_fastapi/app/crud/listing_amenity.py b/backend_fastapi/app/crud/listing_amenity.py
index d72eb5c..68a636f 100644
--- a/backend_fastapi/app/crud/listing_amenity.py
+++ b/backend_fastapi/app/crud/listing_amenity.py
@@ -2,9 +2,13 @@ from sqlalchemy.orm import Session
 from app.models.listing_amenity import ListingAmenity
 from app.schemas.listing_amenity import ListingAmenityCreate
 from fastapi import HTTPException
+
+from app.models.amenity import Amenity
+from app.models.listing_amenity import ListingAmenity
+
 def create_listing_amenity(db: Session, la: ListingAmenityCreate):
     try:
-        # ❗️Daha önce eklenmiş mi kontrolü
+
         existing = db.query(ListingAmenity).filter_by(
             listing_id=la.listing_id,
             amenity_id=la.amenity_id
@@ -13,7 +17,7 @@ def create_listing_amenity(db: Session, la: ListingAmenityCreate):
         if existing:
             raise HTTPException(status_code=400, detail="Bu özellik zaten bu ilana eklenmiş.")
 
-        # Ekleme işlemi
+
         db_la = ListingAmenity(**la.model_dump())
         db.add(db_la)
         db.commit()
@@ -23,8 +27,15 @@ def create_listing_amenity(db: Session, la: ListingAmenityCreate):
     except Exception as e:
         raise HTTPException(status_code=500, detail=str(e))
 
+
+
 def get_amenities_for_listing(db: Session, listing_id: int):
-    return db.query(ListingAmenity).filter(ListingAmenity.listing_id == listing_id).all()
+    return (
+        db.query(Amenity)
+        .join(ListingAmenity, Amenity.id == ListingAmenity.amenity_id)
+        .filter(ListingAmenity.listing_id == listing_id)
+        .all()
+    )
 
 def delete_listing_amenity(db: Session, listing_id: int, amenity_id: int):
     la = db.query(ListingAmenity).filter_by(listing_id=listing_id, amenity_id=amenity_id).first()
diff --git a/backend_fastapi/app/crud/review.py b/backend_fastapi/app/crud/review.py
index c2c251c..0c8414e 100644
--- a/backend_fastapi/app/crud/review.py
+++ b/backend_fastapi/app/crud/review.py
@@ -3,17 +3,27 @@ from app.models.review import Review
 from app.schemas.review import ReviewCreate
 from typing import List
 from app.schemas.review import ReviewUpdate
+from app.models.listing import Listing
+from sqlalchemy import func
+from sqlalchemy.orm import joinedload
 
 
 def create_review(db: Session, user_id: int, review: ReviewCreate) -> Review:
-    db_review = Review(**review.dict(), user_id=user_id)
+    db_review = Review(**review.model_dump(), user_id=user_id)
     db.add(db_review)
     db.commit()
     db.refresh(db_review)
+
+    update_average_rating(db, review.listing_id)
     return db_review
 
+
 def get_reviews_by_listing(db: Session, listing_id: int) -> List[Review]:
-    return db.query(Review).filter(Review.listing_id == listing_id).all()
+    return db.query(Review)\
+        .options(joinedload(Review.user))\
+        .filter(Review.listing_id == listing_id)\
+        .all()
+
 def update_review(db: Session, review_id: int, user_id: int, review_update: ReviewUpdate):
     review = db.query(Review).filter(Review.id == review_id, Review.user_id == user_id).first()
     if not review:
@@ -22,11 +32,23 @@ def update_review(db: Session, review_id: int, user_id: int, review_update: Revi
     review.comment = review_update.comment
     db.commit()
     db.refresh(review)
+
+    update_average_rating(db, review.listing_id)
     return review
+
 def delete_review(db: Session, review_id: int, user_id: int):
     review = db.query(Review).filter(Review.id == review_id, Review.user_id == user_id).first()
     if not review:
         return False
     db.delete(review)
     db.commit()
+
+    update_average_rating(db,review.listing_id)
     return True
+
+def update_average_rating(db: Session, listing_id: int):
+    average = db.query(func.avg(Review.rating)).filter(Review.listing_id == listing_id).scalar()
+    listing = db.query(Listing).filter(Listing.id == listing_id).first()
+    if listing:
+        listing.average_rating = round(average or 0, 2)
+        db.commit()
\ No newline at end of file
diff --git a/backend_fastapi/app/crud/user.py b/backend_fastapi/app/crud/user.py
index 1a36478..1aef561 100644
--- a/backend_fastapi/app/crud/user.py
+++ b/backend_fastapi/app/crud/user.py
@@ -89,3 +89,6 @@ def create_user_from_phone(db: Session, user: PhoneRegister):
     return db_user
 def get_user_by_phone(db: Session, phone: str):
     return db.query(User).filter(User.phone == phone).first()
+
+def get_user_by_id(db: Session, user_id: int):
+    return db.query(User).filter(User.id == user_id).first()
\ No newline at end of file
diff --git a/backend_fastapi/app/models/__pycache__/favorite.cpython-312.pyc b/backend_fastapi/app/models/__pycache__/favorite.cpython-312.pyc
index 6c078ad..e36d242 100644
Binary files a/backend_fastapi/app/models/__pycache__/favorite.cpython-312.pyc and b/backend_fastapi/app/models/__pycache__/favorite.cpython-312.pyc differ
diff --git a/backend_fastapi/app/models/listing.py b/backend_fastapi/app/models/listing.py
index 05b2e62..5a2dd30 100644
--- a/backend_fastapi/app/models/listing.py
+++ b/backend_fastapi/app/models/listing.py
@@ -21,7 +21,11 @@ class Listing(Base):
     average_rating = Column(Numeric, server_default="0")
     home_rules = Column(Text)
     capacity = Column(Integer)
-    amenities = Column(ARRAY(Text))
+    amenities = relationship(
+        "Amenity",
+        secondary="listing_amenities",
+        backref="listings"
+    )
 
     # ✅ İlişki satırı sınıfın içinde olmalı
     bookings = relationship("Booking", back_populates="listing")
diff --git a/backend_fastapi/app/models/review.py b/backend_fastapi/app/models/review.py
index 327c5d0..1ace30e 100644
--- a/backend_fastapi/app/models/review.py
+++ b/backend_fastapi/app/models/review.py
@@ -1,6 +1,7 @@
 from sqlalchemy import Column, Integer, Text, ForeignKey, Float, TIMESTAMP
 from sqlalchemy.sql import func
 from app.db.session import Base
+from sqlalchemy.orm import relationship
 
 class Review(Base):
     __tablename__ = "reviews"
@@ -11,3 +12,4 @@ class Review(Base):
     rating = Column(Float, nullable=False)
     comment = Column(Text)
     created_at = Column(TIMESTAMP(timezone=True), server_default=func.now())
+    user = relationship("User", back_populates="reviews")
diff --git a/backend_fastapi/app/models/user.py b/backend_fastapi/app/models/user.py
index e066027..712aa9e 100644
--- a/backend_fastapi/app/models/user.py
+++ b/backend_fastapi/app/models/user.py
@@ -20,3 +20,4 @@ class User(Base):
 
     # ✅ İlişkiyi buraya alıyoruz
     bookings = relationship("Booking", back_populates="user")
+    reviews = relationship("Review", back_populates="user")
diff --git a/backend_fastapi/app/routers/listing.py b/backend_fastapi/app/routers/listing.py
index f2236e6..e761893 100644
--- a/backend_fastapi/app/routers/listing.py
+++ b/backend_fastapi/app/routers/listing.py
@@ -1,5 +1,4 @@
 from app.dependencies import get_current_user 
-from app.models.user import User 
 from fastapi import APIRouter, Depends, HTTPException, File, UploadFile, Form
 from sqlalchemy.orm import Session
 from typing import List, Optional
@@ -9,6 +8,10 @@ from app.db.dependency import get_db
 import os
 import shutil
 from datetime import datetime
+from fastapi.responses import JSONResponse
+from app.models.user import User
+from app.models.listing import Listing as ListingModel
+from app.schemas.amenity import Amenity
 
 router = APIRouter(
     prefix="/listings",
@@ -38,19 +41,19 @@ async def create_listing_route(
         # Uploads klasörünü oluştur
         upload_dir = "uploads/listings"
         os.makedirs(upload_dir, exist_ok=True)
-        
+
         # Benzersiz dosya adı oluştur
         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
         file_extension = os.path.splitext(photo.filename)[1] if photo.filename else ".jpg"
         filename = f"listing_{current_user.id}_{timestamp}{file_extension}"
         file_path = os.path.join(upload_dir, filename)
-        
+
         # Dosyayı kaydet
         with open(file_path, "wb") as buffer:
             shutil.copyfileobj(photo.file, buffer)
-        
+
         image_urls.append(f"/uploads/listings/{filename}")
-    
+
     # JSON string'leri parse et
     host_languages_list = []
     if host_languages:
@@ -59,7 +62,7 @@ async def create_listing_route(
             host_languages_list = json.loads(host_languages)
         except:
             host_languages_list = [host_languages]
-    
+
     amenities_list = []
     if amenities:
         try:
@@ -67,7 +70,7 @@ async def create_listing_route(
             amenities_list = json.loads(amenities)
         except:
             amenities_list = [amenities]
-    
+
     # ListingCreate objesi oluştur
     listing_data = {
         "title": title,
@@ -83,7 +86,7 @@ async def create_listing_route(
         "capacity": capacity,
         "amenities": amenities_list
     }
-    
+
     listing = ListingCreate(**listing_data)
     return create_listing(db=db, listing=listing, user_id=current_user.id)
 
@@ -93,8 +96,8 @@ def read_listings(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)
 
 @router.get("/my-listings", response_model=List[Listing])
 def read_my_listings(
-    skip: int = 0, 
-    limit: int = 100, 
+    skip: int = 0,
+    limit: int = 100,
     db: Session = Depends(get_db),
     current_user: User = Depends(get_current_user)
 ):
@@ -114,6 +117,8 @@ def delete(listing_id: int, db: Session = Depends(get_db)):
         raise HTTPException(status_code=404, detail="Listing not found")
     return db_listing
 
+
+
 @router.put("/{listing_id}", response_model=Listing)
 async def update(
     listing_id: int,
@@ -136,30 +141,30 @@ async def update(
     db_listing = get_listing(db, listing_id)
     if not db_listing:
         raise HTTPException(status_code=404, detail="Listing not found")
-    
+
     # Kullanıcının kendi listing'ini güncelleyip güncelleyemediğini kontrol et
     if db_listing.user_id != current_user.id:
         raise HTTPException(status_code=403, detail="Not authorized to update this listing")
-    
+
     # Fotoğrafı kaydet
     image_urls = db_listing.image_urls or []
     if photo:
         # Uploads klasörünü oluştur
         upload_dir = "uploads/listings"
         os.makedirs(upload_dir, exist_ok=True)
-        
+
         # Benzersiz dosya adı oluştur
         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
         file_extension = os.path.splitext(photo.filename)[1] if photo.filename else ".jpg"
         filename = f"listing_{current_user.id}_{timestamp}{file_extension}"
         file_path = os.path.join(upload_dir, filename)
-        
+
         # Dosyayı kaydet
         with open(file_path, "wb") as buffer:
             shutil.copyfileobj(photo.file, buffer)
-        
+
         image_urls.append(f"/uploads/listings/{filename}")
-    
+
     # JSON string'leri parse et
     host_languages_list = None
     if host_languages:
@@ -168,7 +173,7 @@ async def update(
             host_languages_list = json.loads(host_languages)
         except:
             host_languages_list = [host_languages]
-    
+
     amenities_list = None
     if amenities:
         try:
@@ -176,7 +181,7 @@ async def update(
             amenities_list = json.loads(amenities)
         except:
             amenities_list = [amenities]
-    
+
     # ListingCreate objesi oluştur
     listing_data = {}
     if title is not None:
@@ -203,6 +208,52 @@ async def update(
         listing_data["capacity"] = capacity
     if amenities_list is not None:
         listing_data["amenities"] = amenities_list
-    
+
     listing = ListingCreate(**listing_data)
-    return update_listing(db, listing_id, listing) 
\ No newline at end of file
+    return update_listing(db, listing_id, listing)
+
+
+from app.crud import listing_amenity
+
+@router.get("/{listing_id}/with-host")
+def read_listing_with_host(listing_id: int, db: Session = Depends(get_db)):
+    listing = db.query(ListingModel).filter(ListingModel.id == listing_id).first()
+    if not listing:
+        raise HTTPException(status_code=404, detail="Listing not found")
+
+    user = db.query(User).filter(User.id == listing.user_id).first()
+    if not user:
+        raise HTTPException(status_code=404, detail="Host not found")
+
+
+    amenities = listing_amenity.get_amenities_for_listing(db, listing_id)
+    amenities_data = [Amenity.model_validate(a).model_dump() for a in amenities]
+
+    listing_data = {
+        "id": listing.id,
+        "title": listing.title,
+        "description": listing.description,
+        "price": float(listing.price) if listing.price else None,
+        "location": listing.location,
+        "lat": listing.lat,
+        "lng": listing.lng,
+        "home_type": listing.home_type,
+        "image_urls": listing.image_urls,
+        "average_rating": float(listing.average_rating) if listing.average_rating else 0.0,
+        "home_rules": listing.home_rules,
+        "amenities": amenities_data,
+        "host": {
+            "id": user.id,
+            "name": user.name,
+            "surname": user.surname,
+            "email": user.email,
+            "birthdate": user.birthdate.isoformat() if user.birthdate else None,
+            "phone": user.phone,
+            "country": user.country,
+            "profile_image": user.profile_image,
+            "is_active": user.is_active,
+            "created_at": user.created_at.isoformat() if user.created_at else None,
+        }
+    }
+
+    return JSONResponse(content=listing_data)
\ No newline at end of file
diff --git a/backend_fastapi/app/schemas/amenity.py b/backend_fastapi/app/schemas/amenity.py
index 9e234dc..75bc610 100644
--- a/backend_fastapi/app/schemas/amenity.py
+++ b/backend_fastapi/app/schemas/amenity.py
@@ -1,3 +1,5 @@
+from typing import Optional
+
 from pydantic import BaseModel
 
 class AmenityBase(BaseModel):
@@ -11,3 +13,7 @@ class Amenity(AmenityBase):
 
     class Config:
         from_attributes = True  # eski adı orm_mode
+
+class AmenityInListing(BaseModel):
+    id: int
+    name: Optional[str] = None
\ No newline at end of file
diff --git a/backend_fastapi/app/schemas/listing.py b/backend_fastapi/app/schemas/listing.py
index 0abbec2..c43d341 100644
--- a/backend_fastapi/app/schemas/listing.py
+++ b/backend_fastapi/app/schemas/listing.py
@@ -2,6 +2,9 @@ from pydantic import BaseModel
 from typing import Optional, List
 from datetime import datetime
 
+from app.schemas.amenity import Amenity, AmenityInListing
+
+
 class ListingBase(BaseModel):
    
     title: str
@@ -16,7 +19,7 @@ class ListingBase(BaseModel):
     average_rating: Optional[float] = 0
     home_rules: Optional[str] = None
     capacity: Optional[int] = None
-    amenities: Optional[List[str]] = None
+    amenities: Optional[List[AmenityInListing]] = None
 
 class ListingCreate(ListingBase):
     pass
diff --git a/backend_fastapi/app/schemas/review.py b/backend_fastapi/app/schemas/review.py
index 2326de9..02943a4 100644
--- a/backend_fastapi/app/schemas/review.py
+++ b/backend_fastapi/app/schemas/review.py
@@ -1,6 +1,9 @@
 from pydantic import BaseModel
 from datetime import datetime
 
+from app.schemas.user import UserOut
+
+
 class ReviewCreate(BaseModel):
     listing_id: int
     rating: float
@@ -13,6 +16,7 @@ class ReviewOut(BaseModel):
     rating: float
     comment: str
     created_at: datetime
+    user : UserOut
 
     class Config:
         orm_mode = True
diff --git a/backend_fastapi/app/schemas/user.py b/backend_fastapi/app/schemas/user.py
index 5c5ac2c..95d55b9 100644
--- a/backend_fastapi/app/schemas/user.py
+++ b/backend_fastapi/app/schemas/user.py
@@ -40,9 +40,11 @@ class UserUpdate(BaseModel):
     is_active: Optional[bool] = None
 
 
-class UserOut(UserBase):
+class UserOut(BaseModel):
     id: int
-    created_at: Optional[date]
+    name: str
+    surname: str
+    profile_image: Optional[str] = None
 
     class Config:
         from_attributes = True
diff --git a/stayzi_ui/ios/Podfile.lock b/stayzi_ui/ios/Podfile.lock
index 77f373e..9f234ca 100644
--- a/stayzi_ui/ios/Podfile.lock
+++ b/stayzi_ui/ios/Podfile.lock
@@ -1,5 +1,7 @@
 PODS:
   - Flutter (1.0.0)
+  - geocoding_ios (1.0.5):
+    - Flutter
   - geolocator_apple (1.2.0):
     - Flutter
     - FlutterMacOS
@@ -18,6 +20,7 @@ PODS:
 
 DEPENDENCIES:
   - Flutter (from `Flutter`)
+  - geocoding_ios (from `.symlinks/plugins/geocoding_ios/ios`)
   - geolocator_apple (from `.symlinks/plugins/geolocator_apple/darwin`)
   - image_picker_ios (from `.symlinks/plugins/image_picker_ios/ios`)
   - package_info_plus (from `.symlinks/plugins/package_info_plus/ios`)
@@ -28,6 +31,8 @@ DEPENDENCIES:
 EXTERNAL SOURCES:
   Flutter:
     :path: Flutter
+  geocoding_ios:
+    :path: ".symlinks/plugins/geocoding_ios/ios"
   geolocator_apple:
     :path: ".symlinks/plugins/geolocator_apple/darwin"
   image_picker_ios:
@@ -43,6 +48,7 @@ EXTERNAL SOURCES:
 
 SPEC CHECKSUMS:
   Flutter: e0871f40cf51350855a761d2e70bf5af5b9b5de7
+  geocoding_ios: eafacae6ad11a1eb56681f7d11df602a5fd49416
   geolocator_apple: 66b711889fd333205763b83c9dcf0a57a28c7afd
   image_picker_ios: c560581cceedb403a6ff17f2f816d7fea1421fc1
   package_info_plus: c0502532a26c7662a62a356cebe2692ec5fe4ec4
diff --git a/stayzi_ui/lib/models/listing_model.dart b/stayzi_ui/lib/models/listing_model.dart
index 771be63..44351f2 100644
--- a/stayzi_ui/lib/models/listing_model.dart
+++ b/stayzi_ui/lib/models/listing_model.dart
@@ -1,3 +1,6 @@
+import 'package:stayzi_ui/models/amenity_model.dart';
+import 'package:stayzi_ui/models/user_model.dart';
+
 class Listing {
   final int id;
   final int? userId;
@@ -13,9 +16,10 @@ class Listing {
   final double averageRating;
   final String? homeRules;
   final int? capacity;
-  final List<String>? amenities;
+  final List<Amenity>? amenities;
   final DateTime createdAt;
   final DateTime? updatedAt;
+  final User? host;
 
   Listing({
     required this.id,
@@ -35,9 +39,11 @@ class Listing {
     this.amenities,
     required this.createdAt,
     this.updatedAt,
+    this.host,
   });
 
   factory Listing.fromJson(Map<String, dynamic> json) {
+    print("👤 Gelen HOST JSON: ${json['host']}");
     return Listing(
       id: json['id'],
       userId: json['user_id'],
@@ -61,13 +67,16 @@ class Listing {
       capacity: json['capacity'],
       amenities:
           json['amenities'] != null
-              ? List<String>.from(json['amenities'])
+              ? List<Amenity>.from(
+                json['amenities'].map((e) => Amenity.fromJson(e)),
+              )
               : null,
       createdAt: DateTime.parse(json['created_at']),
       updatedAt:
           json['updated_at'] != null
               ? DateTime.parse(json['updated_at'])
               : null,
+      host: json['host'] != null ? User.fromJson(json['host']) : null,
     );
   }
 
@@ -90,6 +99,7 @@ class Listing {
       'amenities': amenities,
       'created_at': createdAt.toIso8601String(),
       'updated_at': updatedAt?.toIso8601String(),
+      'host': host?.toJson(),
     };
   }
 }
@@ -108,7 +118,7 @@ class ListingCreate {
   final double averageRating;
   final String? homeRules;
   final int? capacity;
-  final List<String>? amenities;
+  final List<Amenity>? amenities;
 
   ListingCreate({
     this.userId,
@@ -142,7 +152,7 @@ class ListingCreate {
       'average_rating': averageRating,
       'home_rules': homeRules,
       'capacity': capacity,
-      'amenities': amenities,
+      'amenities': amenities?.map((e) => e.toJson()).toList(),
     };
   }
 }
diff --git a/stayzi_ui/lib/models/user_model.dart b/stayzi_ui/lib/models/user_model.dart
index 32e8d97..6bd753e 100644
--- a/stayzi_ui/lib/models/user_model.dart
+++ b/stayzi_ui/lib/models/user_model.dart
@@ -1,3 +1,5 @@
+import 'package:stayzi_ui/services/api_constants.dart';
+
 class User {
   final int id;
   final String? email;
@@ -24,15 +26,27 @@ class User {
   });
 
   factory User.fromJson(Map<String, dynamic> json) {
+    print("👤 Gelen HOST JSON: $json");
+    json.forEach((key, value) {
+      print("🔍 $key => $value (${value.runtimeType})");
+    });
     return User(
       id: json['id'],
-      email: json['email'],
+      email: json['email'] ?? 'Bilinmi',
       name: json['name'],
       surname: json['surname'],
-      birthdate: DateTime.parse(json['birthdate']),
+      birthdate:
+          json['birthdate'] != null
+              ? DateTime.parse(json['birthdate'])
+              : DateTime(2000, 1, 1),
       phone: json['phone'],
       country: json['country'],
-      profileImage: json['profile_image'],
+      profileImage:
+          json['profile_image'] != null && json['profile_image'] is String
+              ? (json['profile_image'].toString().startsWith('/')
+                  ? '${ApiConstants.baseUrl}${json['profile_image']}'
+                  : json['profile_image'].toString())
+              : null,
       isActive: json['is_active'] ?? true,
       createdAt:
           json['created_at'] != null
diff --git a/stayzi_ui/lib/screens/detail/comment_page.dart b/stayzi_ui/lib/screens/detail/comment_page.dart
index cdaa61d..d15d755 100644
--- a/stayzi_ui/lib/screens/detail/comment_page.dart
+++ b/stayzi_ui/lib/screens/detail/comment_page.dart
@@ -1,104 +1,158 @@
 import 'package:flutter/material.dart';
+import 'package:intl/intl.dart';
+import 'package:stayzi_ui/models/review_model.dart';
 import 'package:stayzi_ui/screens/onboard/widgets/form_widget.dart';
+import 'package:stayzi_ui/services/api_constants.dart';
+import 'package:stayzi_ui/services/api_service.dart';
 
-class CommentPage extends StatelessWidget {
-  const CommentPage({super.key});
+class CommentPage extends StatefulWidget {
+  final int listingId;
+  const CommentPage({super.key, required this.listingId});
+
+  @override
+  State<CommentPage> createState() => _CommentPageState();
+}
+
+class _CommentPageState extends State<CommentPage> {
+  List<Review> reviews = [];
+  final TextEditingController _searchController = TextEditingController();
+  List<Review> filteredReviews = [];
+
+  @override
+  void initState() {
+    super.initState();
+    loadReviews();
+  }
+
+  Future<void> loadReviews() async {
+    try {
+      final fetchedReviews = await ApiService().fetchReviews(widget.listingId);
+      setState(() {
+        reviews = fetchedReviews;
+        filteredReviews = fetchedReviews;
+      });
+    } catch (e) {
+      print('Yorumlar yüklenemedi: $e');
+    }
+  }
 
   @override
   Widget build(BuildContext context) {
     return Scaffold(
-      body: Center(
-        child: Column(
-          crossAxisAlignment: CrossAxisAlignment.start,
-          children: [
-            SizedBox(height: 65),
-            Padding(
-              padding: const EdgeInsets.all(20.0),
-              child: Text(
-                '35 Değerlendirme',
-                style: TextStyle(fontSize: 23, fontWeight: FontWeight.bold),
-              ),
-            ),
-            Padding(
-              padding: const EdgeInsets.all(15.0),
-              child: FormWidget(
-                hintText: 'Yorumlarda Arayın',
-                helperText: "Aramak istediğiniz anahtar kelimeyi giriniz.",
-              ),
-            ),
-            Expanded(
-              child: ListView(
-                padding: const EdgeInsets.symmetric(horizontal: 20),
+      body:
+          filteredReviews.isEmpty
+              ? const Center(child: CircularProgressIndicator())
+              : Column(
+                crossAxisAlignment: CrossAxisAlignment.start,
                 children: [
-                  _buildReview(
-                    name: "Christian *****",
-                    locationInfo: "Baltimore, Maryland",
-                    timeAgo: "1 week ago",
-                    stayInfo: "Birkaç gece kaldı",
-                    rating: 5.0,
-                    comment:
-                        "This property was a pleasure to visit. Everything is perfectly as advertised, clean, and well maintained. The cabin is well equipped with lots of little convenient amenities.",
-                    avatarUrl: "https://randomuser.me/api/portraits/men/11.jpg",
+                  const SizedBox(height: 65),
+                  Padding(
+                    padding: const EdgeInsets.all(20.0),
+                    child: Text(
+                      '${filteredReviews.length} Değerlendirme',
+                      style: TextStyle(
+                        fontSize: 23,
+                        fontWeight: FontWeight.bold,
+                      ),
+                    ),
                   ),
-                  _buildReview(
-                    name: "Hillary *****",
-                    locationInfo: "5 years on Airbnb",
-                    timeAgo: "2 weeks ago",
-                    stayInfo: "Bir evcil hayvan",
-                    rating: 4.5,
-                    comment:
-                        "We loved Dreamtime! I booked the reservation on a whim based on the cute photos and it did not disappoint! The cleanliness of the entire place was impressive.",
-                    avatarUrl:
-                        "https://randomuser.me/api/portraits/women/44.jpg",
+                  Padding(
+                    padding: const EdgeInsets.all(15.0),
+                    child: Builder(
+                      builder: (context) {
+                        _searchController.addListener(() {
+                          final query = _searchController.text.toLowerCase();
+                          setState(() {
+                            filteredReviews =
+                                reviews
+                                    .where(
+                                      (review) => review.comment
+                                          .toLowerCase()
+                                          .contains(query),
+                                    )
+                                    .toList();
+                          });
+                        });
+
+                        return FormWidget(
+                          controller: _searchController,
+                          hintText: 'Yorumlarda Arayın',
+                          helperText:
+                              "Aramak istediğiniz anahtar kelimeyi giriniz.",
+                          textInputAction: TextInputAction.search,
+                          keyboardType: TextInputType.text,
+                        );
+                      },
+                    ),
+                  ),
+                  Expanded(
+                    child: ListView.builder(
+                      padding: const EdgeInsets.symmetric(horizontal: 20),
+                      itemCount: filteredReviews.length,
+                      itemBuilder: (context, index) {
+                        final review = filteredReviews[index];
+                        return _buildReview(
+                          name: '${review.user.name} ${review.user.surname}',
+                          locationInfo: '', // opsiyonel
+                          timeAgo: DateFormat(
+                            'dd MMMM yyyy',
+                          ).format(review.createdAt),
+                          stayInfo: '', // opsiyonel
+                          rating: review.rating,
+                          comment: review.comment,
+                          avatarUrl:
+                              review.user.profileImage != null &&
+                                      review.user.profileImage!.isNotEmpty
+                                  ? '${ApiConstants.baseUrl}${review.user.profileImage!}'
+                                  : 'https://via.placeholder.com/150',
+                        );
+                      },
+                    ),
                   ),
                 ],
               ),
-            ),
-          ],
-        ),
-      ),
     );
   }
-}
 
-Widget _buildReview({
-  required String name,
-  required String locationInfo,
-  required String timeAgo,
-  required String stayInfo,
-  required double rating,
-  required String comment,
-  required String avatarUrl,
-}) {
-  return Padding(
-    padding: const EdgeInsets.symmetric(vertical: 10),
-    child: Row(
-      crossAxisAlignment: CrossAxisAlignment.start,
-      children: [
-        CircleAvatar(backgroundImage: NetworkImage(avatarUrl), radius: 22),
-        const SizedBox(width: 12),
-        Expanded(
-          child: Column(
-            crossAxisAlignment: CrossAxisAlignment.start,
-            children: [
-              Text(name, style: const TextStyle(fontWeight: FontWeight.bold)),
-              Text(locationInfo, style: const TextStyle(color: Colors.grey)),
-              const SizedBox(height: 4),
-              Row(
-                children: [
-                  Icon(Icons.star, size: 16, color: Colors.black),
-                  Text(
-                    " $rating  ·  $timeAgo  ·  $stayInfo",
-                    style: const TextStyle(color: Colors.grey),
-                  ),
-                ],
-              ),
-              const SizedBox(height: 6),
-              Text(comment),
-            ],
+  Widget _buildReview({
+    required String name,
+    required String locationInfo,
+    required String timeAgo,
+    required String stayInfo,
+    required double rating,
+    required String comment,
+    required String avatarUrl,
+  }) {
+    return Padding(
+      padding: const EdgeInsets.symmetric(vertical: 10),
+      child: Row(
+        crossAxisAlignment: CrossAxisAlignment.start,
+        children: [
+          CircleAvatar(backgroundImage: NetworkImage(avatarUrl), radius: 22),
+          const SizedBox(width: 12),
+          Expanded(
+            child: Column(
+              crossAxisAlignment: CrossAxisAlignment.start,
+              children: [
+                Text(name, style: const TextStyle(fontWeight: FontWeight.bold)),
+                Text(locationInfo, style: const TextStyle(color: Colors.grey)),
+                const SizedBox(height: 4),
+                Row(
+                  children: [
+                    Icon(Icons.star, size: 16, color: Colors.black),
+                    Text(
+                      " $rating  ·  $timeAgo  ·  $stayInfo",
+                      style: const TextStyle(color: Colors.grey),
+                    ),
+                  ],
+                ),
+                const SizedBox(height: 6),
+                Text(comment),
+              ],
+            ),
           ),
-        ),
-      ],
-    ),
-  );
+        ],
+      ),
+    );
+  }
 }
diff --git a/stayzi_ui/lib/screens/detail/detail_scren.dart b/stayzi_ui/lib/screens/detail/detail_scren.dart
index 689fc0a..5e87ca7 100644
--- a/stayzi_ui/lib/screens/detail/detail_scren.dart
+++ b/stayzi_ui/lib/screens/detail/detail_scren.dart
@@ -1,4 +1,5 @@
 import 'package:flutter/material.dart';
+import 'package:flutter_rating_bar/flutter_rating_bar.dart';
 import 'package:stayzi_ui/screens/detail/comment_page.dart';
 import 'package:stayzi_ui/screens/detail/widgets/ev_sahibi_bilgisi.dart';
 import 'package:stayzi_ui/screens/detail/widgets/ilan_baslik.dart';
@@ -9,7 +10,10 @@ import 'package:stayzi_ui/screens/detail/widgets/olanaklar_ve_kurallar.dart';
 import 'package:stayzi_ui/screens/detail/widgets/takvim_bilgisi.dart';
 import 'package:stayzi_ui/screens/detail/widgets/yorumlar_degerlendirmeler.dart';
 import 'package:stayzi_ui/screens/onboard/widgets/basic_button.dart';
+import 'package:stayzi_ui/screens/onboard/widgets/form_widget.dart';
 import 'package:stayzi_ui/screens/payment/payment_screen.dart';
+import 'package:stayzi_ui/services/api_service.dart';
+import 'package:stayzi_ui/services/storage_service.dart';
 
 class ListingDetailPage extends StatefulWidget {
   final Map<String, dynamic> listing;
@@ -22,6 +26,126 @@ class ListingDetailPage extends StatefulWidget {
 class _ListingDetailPageState extends State<ListingDetailPage> {
   bool isFavorite = false;
   DateTimeRange? selectedRange;
+  int yorumSayisi = 0;
+  bool isLoggedIn = false;
+  double rating = 0; // En üstte State içinde tanımlanmalı
+  TextEditingController _commentController = TextEditingController();
+
+  void _showCommentSheet(int listingId) {
+    showModalBottomSheet(
+      context: context,
+      isScrollControlled: true,
+      shape: const RoundedRectangleBorder(
+        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
+      ),
+      builder: (context) {
+        return Padding(
+          padding: EdgeInsets.only(
+            bottom: MediaQuery.of(context).viewInsets.bottom,
+          ),
+          child: Container(
+            padding: const EdgeInsets.all(20),
+            child: Column(
+              mainAxisSize: MainAxisSize.min,
+              children: [
+                const Text(
+                  "Yorum Ekle",
+                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
+                ),
+                const SizedBox(height: 16),
+                FormWidget(
+                  labelText: 'Yorumunuzu yazın',
+                  controller: _commentController,
+                  keyboardType: TextInputType.multiline,
+                  textInputAction: TextInputAction.newline,
+                ),
+                const SizedBox(height: 16),
+                Text("Puanınız:", style: TextStyle(fontSize: 16)),
+                const SizedBox(height: 8),
+                RatingBar.builder(
+                  initialRating: 0,
+                  minRating: 1,
+                  direction: Axis.horizontal,
+                  allowHalfRating: false,
+                  itemCount: 5,
+                  itemPadding: EdgeInsets.symmetric(horizontal: 4.0),
+                  itemBuilder:
+                      (context, _) => Icon(Icons.star, color: Colors.amber),
+                  onRatingUpdate: (newRating) {
+                    setState(() {
+                      rating = newRating;
+                    });
+                  },
+                ),
+                const SizedBox(height: 16),
+                SizedBox(
+                  width: 200,
+                  child: ElevatedButtonWidget(
+                    elevation: 1,
+                    buttonColor: const Color.fromRGBO(213, 56, 88, 1),
+                    textColor: Colors.white,
+                    onPressed: () async {
+                      final comment = _commentController.text.trim();
+                      if (comment.isEmpty || rating == 0) {
+                        ScaffoldMessenger.of(context).showSnackBar(
+                          SnackBar(
+                            content: Text('Lütfen yorum ve puan giriniz'),
+                          ),
+                        );
+                        return;
+                      }
+                      Navigator.of(context).pop();
+                      final success = await ApiService().postReview(
+                        listingId: listingId,
+                        rating: rating,
+                        comment: comment,
+                      );
+                      if (success) {
+                        setState(() {
+                          yorumSayisi++;
+                        });
+                        ScaffoldMessenger.of(context).showSnackBar(
+                          SnackBar(content: Text('Yorum eklendi')),
+                        );
+                      } else {
+                        ScaffoldMessenger.of(context).showSnackBar(
+                          SnackBar(
+                            content: Text('Yorum eklenirken hata oluştu'),
+                          ),
+                        );
+                      }
+                    },
+                    buttonText: 'Gönder',
+                  ),
+                ),
+              ],
+            ),
+          ),
+        );
+      },
+    );
+  }
+
+  @override
+  void initState() {
+    super.initState();
+    _commentController = TextEditingController();
+    Future.delayed(Duration.zero, () async {
+      final token =
+          await StorageService()
+              .getToken(); // StorageService üzerinden token alınır
+      debugPrint("💡 initState token: $token");
+      setState(() {
+        isLoggedIn = token != null && token.accessToken.isNotEmpty;
+      });
+    });
+  }
+
+  @override
+  void dispose() {
+    _commentController.dispose();
+    super.dispose();
+  }
 
   @override
   Widget build(BuildContext context) {
@@ -40,6 +164,14 @@ class _ListingDetailPageState extends State<ListingDetailPage> {
     } catch (e) {
       print('Error extracting image URLs: $e');
     }
+    imageList =
+        imageList.map((url) {
+          if (url.startsWith('/')) {
+            return 'http://localhost:8000$url';
+          }
+          return url;
+        }).toList();
+
     return Scaffold(
       backgroundColor: Colors.white,
       body: Stack(
@@ -85,8 +217,8 @@ class _ListingDetailPageState extends State<ListingDetailPage> {
                   indent: 20,
                 ),
                 KonumBilgisi(
-                  latitude: (listing['latitude'] as num?)?.toDouble() ?? 0.0,
-                  longitude: (listing['longitude'] as num?)?.toDouble() ?? 0.0,
+                  latitude: (listing['lat'] as num?)?.toDouble() ?? 0.0,
+                  longitude: (listing['lng'] as num?)?.toDouble() ?? 0.0,
                 ),
                 Divider(
                   thickness: 1,
@@ -115,23 +247,56 @@ class _ListingDetailPageState extends State<ListingDetailPage> {
                     style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                   ),
                 ),
-                Padding(padding: EdgeInsets.all(20), child: Yorumlar()),
-                SizedBox(
-                  width: 250,
-                  height: 60,
-                  child: ElevatedButtonWidget(
-                    side: BorderSide(color: Colors.black, width: 2),
-                    elevation: 0,
-                    buttonText: 'Yorumların hepsini göster',
-                    buttonColor: Colors.transparent,
-                    textColor: Colors.black,
-                    onPressed: () {
-                      Navigator.of(context).push(
-                        MaterialPageRoute(builder: (context) => CommentPage()),
-                      );
+                Padding(
+                  padding: EdgeInsets.all(20),
+                  child: Yorumlar(
+                    listingId: listing['id'],
+                    onCommentCountChanged: (count) {
+                      setState(() {
+                        yorumSayisi = count;
+                      });
                     },
                   ),
                 ),
+                if (isLoggedIn)
+                  Padding(
+                    padding: const EdgeInsets.symmetric(vertical: 8.0),
+                    child: SizedBox(
+                      width: 250,
+                      height: 60,
+                      child: ElevatedButtonWidget(
+                        buttonText: 'Yorum Ekle',
+                        buttonColor: Colors.black,
+                        textColor: Colors.white,
+                        onPressed: () {
+                          _showCommentSheet(listing['id']);
+                        },
+                      ),
+                    ),
+                  ),
+                Visibility(
+                  visible: yorumSayisi > 0,
+                  child: SizedBox(
+                    width: 250,
+                    height: 60,
+                    child: ElevatedButtonWidget(
+                      side: BorderSide(color: Colors.black, width: 2),
+                      elevation: 0,
+                      buttonText: 'Yorumların hepsini göster',
+                      buttonColor: Colors.transparent,
+                      textColor: Colors.black,
+                      onPressed: () {
+                        Navigator.of(context).push(
+                          MaterialPageRoute(
+                            builder:
+                                (context) =>
+                                    CommentPage(listingId: listing['id']),
+                          ),
+                        );
+                      },
+                    ),
+                  ),
+                ),
                 SizedBox(height: 20),
                 Divider(
                   thickness: 1,
@@ -139,7 +304,7 @@ class _ListingDetailPageState extends State<ListingDetailPage> {
                   endIndent: 20,
                   indent: 20,
                 ),
-                OlanaklarVeKurallar(),
+                OlanaklarVeKurallar(listing: listing),
                 SizedBox(height: 100),
               ],
             ),
@@ -227,7 +392,7 @@ class _ListingDetailPageState extends State<ListingDetailPage> {
                             ? nightlyPrice * dayCount
                             : nightlyPrice;
                     return Text(
-                      ' 24${totalPrice.toInt()}',
+                      '₺${totalPrice.toInt()}',
                       style: TextStyle(
                         fontSize: 22,
                         fontWeight: FontWeight.bold,
@@ -248,13 +413,23 @@ class _ListingDetailPageState extends State<ListingDetailPage> {
                 height: 55,
                 child: ElevatedButtonWidget(
                   buttonText: 'Rezerve Et',
-                  buttonColor: Colors.pinkAccent,
+                  buttonColor: const Color.fromRGBO(213, 56, 88, 1),
                   textColor: Colors.white,
                   onPressed: () {
+                    if (selectedRange == null) {
+                      ScaffoldMessenger.of(context).showSnackBar(
+                        SnackBar(content: Text('Lütfen tarih seçiniz')),
+                      );
+                      return;
+                    }
                     Navigator.push(
                       context,
                       MaterialPageRoute(
-                        builder: (context) => const PaymentScreen(),
+                        builder:
+                            (context) => PaymentScreen(
+                              listing: listing,
+                              selectedRange: selectedRange!,
+                            ),
                       ),
                     );
                   },
diff --git a/stayzi_ui/lib/screens/detail/host_detail_screen.dart b/stayzi_ui/lib/screens/detail/host_detail_screen.dart
index 5995e33..8ebe1f7 100644
--- a/stayzi_ui/lib/screens/detail/host_detail_screen.dart
+++ b/stayzi_ui/lib/screens/detail/host_detail_screen.dart
@@ -1,75 +1,126 @@
 import 'package:flutter/material.dart';
 
-class HostDetailScreen extends StatelessWidget {
-  const HostDetailScreen({super.key});
+import '../../models/user_model.dart';
+import '../../services/api_service.dart';
+
+class HostDetailScreen extends StatefulWidget {
+  final int listingID;
+  const HostDetailScreen({super.key, required this.listingID});
+
+  @override
+  State<HostDetailScreen> createState() => _HostDetailScreenState();
+}
+
+class _HostDetailScreenState extends State<HostDetailScreen> {
+  User? hostUser;
+
+  @override
+  void initState() {
+    super.initState();
+    fetchHostUser();
+  }
+
+  Future<void> fetchHostUser() async {
+    try {
+      print("📬 Host ID: ${widget.listingID}");
+
+      final listing = await ApiService().getListingWithHostById(
+        widget.listingID,
+      );
+      print("📦 Listing verisi: $listing");
+      print(
+        "✅ Host user geldi: ${listing.host?.name} ${listing.host?.surname}",
+      );
+      setState(() {
+        hostUser = listing.host;
+      });
+    } catch (e) {
+      print("❌ Host bilgisi alınamadı: $e");
+    }
+  }
 
   @override
   Widget build(BuildContext context) {
     return Scaffold(
       appBar: AppBar(title: Text('Ev Sahibi Bilgileri')),
-      body: Padding(
-        padding: const EdgeInsets.all(20.0),
-        child: Column(
-          crossAxisAlignment: CrossAxisAlignment.start,
-          children: [
-            Center(
-              child: Column(
-                children: [
-                  CircleAvatar(
-                    radius: 50,
-                    backgroundImage: NetworkImage(
-                      'https://randomuser.me/api/portraits/men/32.jpg',
+      body:
+          hostUser == null
+              ? Center(child: CircularProgressIndicator())
+              : Padding(
+                padding: const EdgeInsets.all(20.0),
+                child: Column(
+                  crossAxisAlignment: CrossAxisAlignment.start,
+                  children: [
+                    Center(
+                      child: Column(
+                        children: [
+                          CircleAvatar(
+                            radius: 50,
+                            backgroundImage:
+                                (hostUser?.profileImage != null &&
+                                        hostUser!.profileImage!.isNotEmpty)
+                                    ? NetworkImage(hostUser!.profileImage!)
+                                    : const AssetImage(
+                                          'assets/default_user.png',
+                                        )
+                                        as ImageProvider,
+                          ),
+                          SizedBox(height: 10),
+                          Text(
+                            '${hostUser!.name} ${hostUser!.surname}',
+                            style: TextStyle(
+                              fontSize: 22,
+                              fontWeight: FontWeight.bold,
+                            ),
+                          ),
+                        ],
+                      ),
                     ),
-                  ),
-                  SizedBox(height: 10),
-                  Text(
-                    'Mehmet Çelikkaya',
-                    style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
-                  ),
-                  Text('Ev sahibi, 2018\'den beri'),
-                ],
-              ),
-            ),
-            SizedBox(height: 30),
-            Row(
-              children: [
-                Icon(Icons.star, color: Colors.orange),
-                SizedBox(width: 5),
-                Text('4.8 · 72 değerlendirme'),
-              ],
-            ),
-            SizedBox(height: 20),
-            Text(
-              'Hakkında',
-              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
-            ),
-            SizedBox(height: 10),
-            Text(
-              'Merhaba! Ben Mehmet. Seyahat etmeyi ve yeni insanlarla tanışmayı çok severim. Konuklarımın rahat ve mutlu olması benim için çok önemli.',
-              style: TextStyle(fontSize: 16),
-            ),
-            SizedBox(height: 20),
-            Text(
-              'Yanıt Süresi: Ortalama 1 saat içinde',
-              style: TextStyle(color: Colors.grey[700]),
-            ),
-            SizedBox(height: 5),
-            Text(
-              'Dil: Türkçe, İngilizce',
-              style: TextStyle(color: Colors.grey[700]),
-            ),
-            SizedBox(height: 30),
-            Center(
-              child: ElevatedButton(
-                onPressed: () {
-                  // mesaj gönderme aksiyonu
-                },
-                child: Text('Mesaj Gönder'),
+                    SizedBox(height: 30),
+                    Row(
+                      children: [
+                        Icon(Icons.star, color: Colors.orange),
+                        SizedBox(width: 5),
+                        Text('4.8 · 72 değerlendirme'),
+                      ],
+                    ),
+                    SizedBox(height: 20),
+                    Text(
+                      'Hakkında',
+                      style: TextStyle(
+                        fontSize: 18,
+                        fontWeight: FontWeight.bold,
+                      ),
+                    ),
+                    SizedBox(height: 10),
+                    Text(
+                      hostUser!.country != null
+                          ? 'Ülke: ${hostUser!.country}'
+                          : 'Ülke bilgisi mevcut değil',
+                      style: TextStyle(fontSize: 16),
+                    ),
+                    SizedBox(height: 20),
+                    Text(
+                      'Yanıt Süresi: Ortalama 1 saat içinde',
+                      style: TextStyle(color: Colors.grey[700]),
+                    ),
+                    SizedBox(height: 5),
+                    Text(
+                      'Dil: Türkçe, İngilizce',
+                      style: TextStyle(color: Colors.grey[700]),
+                    ),
+                    SizedBox(height: 30),
+                    Center(
+                      child: ElevatedButton(
+                        onPressed: () {
+                          // mesaj gönderme aksiyonu
+                        },
+                        child: Text('Mesaj Gönder'),
+                      ),
+                    ),
+                  ],
+                ),
               ),
-            ),
-          ],
-        ),
-      ),
     );
   }
 }
diff --git a/stayzi_ui/lib/screens/detail/review_detail_page.dart b/stayzi_ui/lib/screens/detail/review_detail_page.dart
index d668584..af54dfa 100644
--- a/stayzi_ui/lib/screens/detail/review_detail_page.dart
+++ b/stayzi_ui/lib/screens/detail/review_detail_page.dart
@@ -1,18 +1,7 @@
 import 'package:flutter/material.dart';
-
-class Review {
-  final String name;
-  final String comment;
-  final String date;
-  final String profileImage;
-
-  Review({
-    required this.name,
-    required this.comment,
-    required this.date,
-    required this.profileImage,
-  });
-}
+import 'package:intl/intl.dart';
+import 'package:stayzi_ui/models/review_model.dart';
+import 'package:stayzi_ui/services/api_constants.dart';
 
 class ReviewDetailPage extends StatelessWidget {
   final Review review;
@@ -22,6 +11,7 @@ class ReviewDetailPage extends StatelessWidget {
   @override
   Widget build(BuildContext context) {
     return Scaffold(
+      backgroundColor: Colors.white,
       appBar: AppBar(
         title: Text('Yorum Detayı'),
         backgroundColor: Colors.white,
@@ -36,7 +26,9 @@ class ReviewDetailPage extends StatelessWidget {
             Row(
               children: [
                 CircleAvatar(
-                  backgroundImage: AssetImage(review.profileImage),
+                  backgroundImage: NetworkImage(
+                    '${ApiConstants.baseUrl}${review.profileImage}',
+                  ),
                   radius: 25,
                 ),
                 SizedBox(width: 10),
@@ -44,13 +36,9 @@ class ReviewDetailPage extends StatelessWidget {
                   crossAxisAlignment: CrossAxisAlignment.start,
                   children: [
                     Text(
-                      review.name,
-                      style: TextStyle(
-                        fontSize: 18,
-                        fontWeight: FontWeight.bold,
-                      ),
+                      '${review.user.name ?? ''} ${review.user.surname ?? ''}',
                     ),
-                    Text(review.date),
+                    Text(DateFormat('dd MMMM yyyy').format(review.createdAt)),
                   ],
                 ),
               ],
diff --git a/stayzi_ui/lib/screens/detail/widgets/ev_sahibi_bilgisi.dart b/stayzi_ui/lib/screens/detail/widgets/ev_sahibi_bilgisi.dart
index 3cad958..c4acd12 100644
--- a/stayzi_ui/lib/screens/detail/widgets/ev_sahibi_bilgisi.dart
+++ b/stayzi_ui/lib/screens/detail/widgets/ev_sahibi_bilgisi.dart
@@ -1,43 +1,109 @@
 import 'package:flutter/material.dart';
 import 'package:stayzi_ui/screens/detail/host_detail_screen.dart';
+import 'package:stayzi_ui/services/api_constants.dart';
+import 'package:stayzi_ui/services/api_service.dart';
 
-class EvSahibiBilgisi extends StatelessWidget {
+class EvSahibiBilgisi extends StatefulWidget {
   final Map<String, dynamic> listing;
 
   const EvSahibiBilgisi({super.key, required this.listing});
 
+  @override
+  State<EvSahibiBilgisi> createState() => _EvSahibiBilgisiState();
+}
+
+class _EvSahibiBilgisiState extends State<EvSahibiBilgisi> {
+  Map<String, dynamic>? listingWithHost;
+
+  @override
+  void initState() {
+    super.initState();
+    fetchListingWithHost();
+  }
+
+  Future<void> fetchListingWithHost() async {
+    try {
+      final response = await ApiService().getListingWithHostById(
+        widget.listing['id'],
+      );
+      setState(() {
+        listingWithHost =
+            response.toJson(); // Assuming response is a Listing object
+      });
+    } catch (e) {
+      print("❌ Host bilgisi alınamadı: $e");
+    }
+  }
+
   @override
   Widget build(BuildContext context) {
+    if (listingWithHost == null) {
+      return const Center(child: CircularProgressIndicator());
+    }
+
+    final host = listingWithHost!['host'];
+    final int hostId = host?['id'] ?? 0;
+    final String hostName = host?['name'] ?? 'Bilinmiyor';
+    final String? profileImageRaw = host?['profile_image'];
+    final String? profileImage =
+        (profileImageRaw != null && profileImageRaw.isNotEmpty)
+            ? (profileImageRaw.startsWith('/')
+                ? '${ApiConstants.baseUrl}$profileImageRaw'
+                : profileImageRaw)
+            : null;
+    print("👤 Gelen HOST JSON: $host");
+    print("🖼️ profileImage: $profileImage");
+
     return Row(
       children: [
         Padding(
           padding: const EdgeInsets.all(20.0),
-          child: CircleAvatar(backgroundColor: Colors.black),
+          child: CircleAvatar(
+            radius: 30,
+            backgroundImage:
+                profileImage != null ? NetworkImage(profileImage) : null,
+            child:
+                profileImage == null
+                    ? const Icon(Icons.person, size: 30)
+                    : null,
+          ),
         ),
         Column(
           crossAxisAlignment: CrossAxisAlignment.start,
           children: [
             TextButton(
               onPressed: () {
-                Navigator.of(context).push(
-                  MaterialPageRoute(builder: (context) => HostDetailScreen()),
-                );
+                if (hostId != 0) {
+                  Navigator.of(context).push(
+                    MaterialPageRoute(
+                      builder:
+                          (context) =>
+                              HostDetailScreen(listingID: widget.listing['id']),
+                    ),
+                  );
+                } else {
+                  ScaffoldMessenger.of(context).showSnackBar(
+                    const SnackBar(
+                      content: Text(
+                        "Bu ilana ait bir ev sahibi bilgisi bulunamadı.",
+                      ),
+                    ),
+                  );
+                }
               },
               style: ButtonStyle(
+                foregroundColor: WidgetStateProperty.all(Colors.black),
                 textStyle: WidgetStateProperty.all(
-                  TextStyle(
+                  const TextStyle(
                     decoration: TextDecoration.underline,
                     fontSize: 15,
                     fontWeight: FontWeight.bold,
-                    color: Colors.black,
                   ),
                 ),
               ),
-              child: Text(
-                'Ev Sahibi : ${listing['host_name'] ?? 'Bilinmiyor'}',
-              ),
+              child: Text('Ev Sahibi : $hostName'),
             ),
-            Text("5 yıldır ev sahibi"),
+            const Text("5 yıldır ev sahibi"),
           ],
         ),
       ],
diff --git a/stayzi_ui/lib/screens/detail/widgets/ilan_baslik.dart b/stayzi_ui/lib/screens/detail/widgets/ilan_baslik.dart
index 9346505..d175b23 100644
--- a/stayzi_ui/lib/screens/detail/widgets/ilan_baslik.dart
+++ b/stayzi_ui/lib/screens/detail/widgets/ilan_baslik.dart
@@ -1,13 +1,54 @@
 import 'package:flutter/material.dart';
 import 'package:stayzi_ui/screens/detail/comment_page.dart';
+import 'package:stayzi_ui/services/api_service.dart';
 
-class IlanBaslik extends StatelessWidget {
+class IlanBaslik extends StatefulWidget {
   final Map<String, dynamic> listing;
 
   const IlanBaslik({super.key, required this.listing});
 
+  @override
+  State<IlanBaslik> createState() => _IlanBaslikState();
+}
+
+class _IlanBaslikState extends State<IlanBaslik> {
+  int _reviewCount = 0;
+  double _averageRating = 0.0;
+  bool _isLoading = true;
+
+  Future<void> _fetchReviewData() async {
+    try {
+      final reviews = await ApiService().fetchReviews(widget.listing['id']);
+
+      double totalRating = 0.0;
+      for (var review in reviews) {
+        totalRating += review.rating;
+      }
+
+      setState(() {
+        _reviewCount = reviews.length;
+        _averageRating =
+            reviews.isNotEmpty ? totalRating / reviews.length : 0.0;
+        _isLoading = false;
+      });
+    } catch (e) {
+      print("Yorum bilgileri alınamadı: $e");
+      setState(() {
+        _isLoading = false;
+      });
+    }
+  }
+
+  @override
+  void initState() {
+    super.initState();
+    _fetchReviewData();
+  }
+
   @override
   Widget build(BuildContext context) {
+    final ratingText = _averageRating.toStringAsFixed(1);
+
     return Padding(
       padding: const EdgeInsets.symmetric(horizontal: 16),
       child: Column(
@@ -15,7 +56,7 @@ class IlanBaslik extends StatelessWidget {
         children: [
           const SizedBox(height: 20),
           Text(
-            listing['title'] ?? 'Başlık bulunamadı',
+            widget.listing['title'] ?? 'Başlık bulunamadı',
             style: const TextStyle(
               fontSize: 27,
               fontWeight: FontWeight.bold,
@@ -24,33 +65,45 @@ class IlanBaslik extends StatelessWidget {
           ),
           const SizedBox(height: 10),
           Text(
-            listing['location'] ?? 'Lokasyon bulunamadı',
+            widget.listing['location'] ?? 'Lokasyon bulunamadı',
             style: const TextStyle(fontWeight: FontWeight.bold),
           ),
-          const SizedBox(height: 5),
-          const Text("2 misafir - 2 oda - 2 yatak - 1 banyo"),
           const SizedBox(height: 20),
           Row(
             children: [
               const Icon(Icons.star, size: 16, color: Colors.black),
               const SizedBox(width: 4),
-              Text('${listing['average_rating'] ?? "0.0"}'),
-              TextButton(
-                style: ButtonStyle(
-                  foregroundColor: WidgetStateProperty.all(Colors.black),
-                  textStyle: WidgetStateProperty.all(
-                    const TextStyle(decoration: TextDecoration.underline),
+              Text(
+                ratingText,
+                style: const TextStyle(fontWeight: FontWeight.bold),
+              ),
+              const SizedBox(width: 10),
+              if (_isLoading)
+                const CircularProgressIndicator()
+              else if (_reviewCount > 0)
+                TextButton(
+                  style: ButtonStyle(
+                    foregroundColor: WidgetStateProperty.all(Colors.black),
+                    textStyle: WidgetStateProperty.all(
+                      const TextStyle(decoration: TextDecoration.underline),
+                    ),
                   ),
+                  onPressed: () {
+                    Navigator.of(context).push(
+                      MaterialPageRoute(
+                        builder:
+                            (context) =>
+                                CommentPage(listingId: widget.listing['id']),
+                      ),
+                    );
+                  },
+                  child: Text("$_reviewCount değerlendirme"),
+                )
+              else
+                const Text(
+                  "Henüz değerlendirme yok",
+                  style: TextStyle(color: Colors.grey),
                 ),
-                onPressed: () {
-                  Navigator.of(context).push(
-                    MaterialPageRoute(
-                      builder: (context) => const CommentPage(),
-                    ),
-                  );
-                },
-                child: const Text("35 değerlendirme"),
-              ),
             ],
           ),
           const SizedBox(height: 10),
diff --git a/stayzi_ui/lib/screens/detail/widgets/konum_harita.dart b/stayzi_ui/lib/screens/detail/widgets/konum_harita.dart
index 2ad32bd..08577e6 100644
--- a/stayzi_ui/lib/screens/detail/widgets/konum_harita.dart
+++ b/stayzi_ui/lib/screens/detail/widgets/konum_harita.dart
@@ -1,25 +1,63 @@
 import 'package:flutter/material.dart';
 import 'package:flutter_map/flutter_map.dart';
+import 'package:geocoding/geocoding.dart';
 import 'package:latlong2/latlong.dart';
 
 class KonumBilgisi extends StatelessWidget {
   final double? latitude;
   final double? longitude;
+  final String? locationName;
 
-  const KonumBilgisi({super.key, this.latitude, this.longitude});
+  const KonumBilgisi({
+    super.key,
+    this.latitude,
+    this.longitude,
+    this.locationName,
+  });
+
+  bool _isValidCoordinate(double? lat, double? lng) {
+    return lat != null &&
+        lng != null &&
+        !lat.isNaN &&
+        !lng.isNaN &&
+        !lat.isInfinite &&
+        !lng.isInfinite;
+  }
 
   @override
   Widget build(BuildContext context) {
-    if (latitude == null ||
-        longitude == null ||
-        latitude!.isNaN ||
-        longitude!.isNaN ||
-        latitude!.isInfinite ||
-        longitude!.isInfinite) {
-      debugPrint('Geçersiz konum: latitude=$latitude, longitude=$longitude');
-      return const SizedBox.shrink();
+    if (_isValidCoordinate(latitude, longitude)) {
+      return _buildMap(LatLng(latitude!, longitude!));
+    }
+
+    if (locationName != null && locationName!.isNotEmpty) {
+      return FutureBuilder<List<Location>>(
+        future: locationFromAddress(locationName!),
+        builder: (context, snapshot) {
+          if (snapshot.connectionState == ConnectionState.waiting) {
+            return const Center(child: CircularProgressIndicator());
+          } else if (snapshot.hasError ||
+              snapshot.data == null ||
+              snapshot.data!.isEmpty) {
+            return const Padding(
+              padding: EdgeInsets.all(16.0),
+              child: Text(
+                "Konum bulunamadı",
+                style: TextStyle(color: Colors.red, fontSize: 16),
+              ),
+            );
+          } else {
+            final loc = snapshot.data!.first;
+            return _buildMap(LatLng(loc.latitude, loc.longitude));
+          }
+        },
+      );
     }
 
+    return const SizedBox.shrink();
+  }
+
+  Widget _buildMap(LatLng center) {
     return Padding(
       padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
       child: Container(
@@ -37,10 +75,7 @@ class KonumBilgisi extends StatelessWidget {
         ),
         clipBehavior: Clip.antiAlias,
         child: FlutterMap(
-          options: MapOptions(
-            initialCenter: LatLng(latitude!, longitude!),
-            initialZoom: 15,
-          ),
+          options: MapOptions(initialCenter: center, initialZoom: 15),
           children: [
             TileLayer(
               urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
@@ -49,7 +84,7 @@ class KonumBilgisi extends StatelessWidget {
             MarkerLayer(
               markers: [
                 Marker(
-                  point: LatLng(latitude!, longitude!),
+                  point: center,
                   width: 40,
                   height: 40,
                   child: Container(
diff --git a/stayzi_ui/lib/screens/detail/widgets/olanaklar_ve_kurallar.dart b/stayzi_ui/lib/screens/detail/widgets/olanaklar_ve_kurallar.dart
index 4aebb27..9082632 100644
--- a/stayzi_ui/lib/screens/detail/widgets/olanaklar_ve_kurallar.dart
+++ b/stayzi_ui/lib/screens/detail/widgets/olanaklar_ve_kurallar.dart
@@ -1,10 +1,21 @@
 import 'package:flutter/material.dart';
 
-class OlanaklarVeKurallar extends StatelessWidget {
-  const OlanaklarVeKurallar({super.key});
+class OlanaklarVeKurallar extends StatefulWidget {
+  final Map<String, dynamic> listing;
 
+  const OlanaklarVeKurallar({super.key, required this.listing});
+
+  @override
+  _OlanaklarVeKurallarState createState() => _OlanaklarVeKurallarState();
+}
+
+class _OlanaklarVeKurallarState extends State<OlanaklarVeKurallar> {
   @override
   Widget build(BuildContext context) {
+    final List<dynamic>? amenities = widget.listing['amenities'];
+    final String homeRules =
+        widget.listing['home_rules'] ?? 'Ev kuralları belirtilmemiş.';
+
     return Column(
       crossAxisAlignment: CrossAxisAlignment.start,
       children: [
@@ -16,13 +27,28 @@ class OlanaklarVeKurallar extends StatelessWidget {
           ),
         ),
         Padding(
-          padding: const EdgeInsets.all(25.0),
-          child: Text(
-            "Eve ait olanaklar burada database üzerinden yerleştirilecek. Bu yüzden burası şu an boş.",
-          ),
+          padding: const EdgeInsets.symmetric(horizontal: 25.0, vertical: 10),
+          child:
+              amenities != null && amenities.isNotEmpty
+                  ? Wrap(
+                    spacing: 10,
+                    runSpacing: 10,
+                    children:
+                        amenities.map((item) {
+                          return Chip(
+                            label: Text(item['name'].toString()),
+                            backgroundColor: Colors.grey[200],
+                            padding: EdgeInsets.symmetric(
+                              horizontal: 10,
+                              vertical: 5,
+                            ),
+                          );
+                        }).toList(),
+                  )
+                  : Text("Bu ilana ait olanak bilgisi bulunmamaktadır."),
         ),
         Divider(thickness: 1, color: Colors.grey, endIndent: 20, indent: 20),
-        SizedBox(height: 15),
+        SizedBox(height: 20),
         Padding(
           padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 10),
           child: Text(
@@ -31,9 +57,18 @@ class OlanaklarVeKurallar extends StatelessWidget {
           ),
         ),
         Padding(
-          padding: const EdgeInsets.all(25.0),
-          child: Text(
-            "Eve ait olanaklar burada database üzerinden yerleştirilecek. Bu yüzden burası şu an boş.",
+          padding: const EdgeInsets.symmetric(horizontal: 25.0),
+          child: Card(
+            color: Colors.grey[100],
+            elevation: 2,
+            margin: EdgeInsets.only(bottom: 20),
+            child: Padding(
+              padding: const EdgeInsets.all(15.0),
+              child: Text(
+                homeRules,
+                style: TextStyle(fontSize: 16, color: Colors.black87),
+              ),
+            ),
           ),
         ),
       ],
diff --git a/stayzi_ui/lib/screens/detail/widgets/yorumlar_degerlendirmeler.dart b/stayzi_ui/lib/screens/detail/widgets/yorumlar_degerlendirmeler.dart
index f25a268..673218d 100644
--- a/stayzi_ui/lib/screens/detail/widgets/yorumlar_degerlendirmeler.dart
+++ b/stayzi_ui/lib/screens/detail/widgets/yorumlar_degerlendirmeler.dart
@@ -1,26 +1,55 @@
 import 'package:flutter/material.dart';
+import 'package:stayzi_ui/models/review_model.dart';
 import 'package:stayzi_ui/screens/detail/review_detail_page.dart';
+import 'package:stayzi_ui/services/api_constants.dart';
+import 'package:stayzi_ui/services/api_service.dart';
 
-class Yorumlar extends StatelessWidget {
-  Yorumlar({super.key});
+class Yorumlar extends StatefulWidget {
+  final int listingId;
+  final void Function(int)? onCommentCountChanged;
+  const Yorumlar({
+    super.key,
+    required this.listingId,
+    this.onCommentCountChanged,
+  });
 
-  final List<Review> reviews = [
-    Review(
-      name: "Tarık Furkan",
-      comment: "Konum olarak doğayla iç içeydi, temizdi.",
-      date: "3 hafta önce",
-      profileImage: "assets/images/user.jpg",
-    ),
-    Review(
-      name: "Emre",
-      comment: "Her şey fotoğraflarda olduğu gibiydi. Çok beğendik.",
-      date: "Şubat 2025",
-      profileImage: "assets/images/user.jpg",
-    ),
-  ];
+  @override
+  State<Yorumlar> createState() => _YorumlarState();
+}
+
+class _YorumlarState extends State<Yorumlar> {
+  List<Review> reviews = [];
+  bool isLoading = true;
+
+  @override
+  void initState() {
+    super.initState();
+    fetchReviews();
+  }
+
+  Future<void> fetchReviews() async {
+    try {
+      final data = await ApiService().fetchReviews(widget.listingId);
+      setState(() {
+        reviews = data;
+        isLoading = false;
+      });
+      widget.onCommentCountChanged?.call(data.length);
+    } catch (e) {
+      print("Yorumlar alınamadı: $e");
+    }
+  }
 
   @override
   Widget build(BuildContext context) {
+    if (isLoading) {
+      return const Center(child: CircularProgressIndicator());
+    }
+
+    if (reviews.isEmpty) {
+      return const Text("Henüz yorum yok.");
+    }
+
     return SizedBox(
       height: 160,
       child: ListView.builder(
@@ -28,6 +57,11 @@ class Yorumlar extends StatelessWidget {
         itemCount: reviews.length,
         itemBuilder: (context, index) {
           final review = reviews[index];
+          final profileImageUrl =
+              review.user.profileImage != null
+                  ? '${ApiConstants.baseUrl}${review.user.profileImage}'
+                  : 'https://via.placeholder.com/150';
+
           return GestureDetector(
             onTap: () {
               Navigator.push(
@@ -51,21 +85,21 @@ class Yorumlar extends StatelessWidget {
                   Row(
                     children: [
                       CircleAvatar(
-                        backgroundImage: AssetImage(review.profileImage),
+                        backgroundImage: NetworkImage(profileImageUrl),
                         radius: 16,
                       ),
                       SizedBox(width: 8),
                       Text(
-                        review.name,
+                        '${review.user.name ?? ''} ${review.user.surname ?? ''}',
                         style: TextStyle(fontWeight: FontWeight.bold),
                       ),
                       Spacer(),
-                      Text(review.date, style: TextStyle(fontSize: 12)),
+                      Text(review.date ?? '', style: TextStyle(fontSize: 12)),
                     ],
                   ),
                   SizedBox(height: 10),
                   Text(
-                    review.comment,
+                    review.comment ?? '',
                     maxLines: 3,
                     overflow: TextOverflow.ellipsis,
                     style: TextStyle(color: Colors.black87),
diff --git a/stayzi_ui/lib/screens/favorite/favorite_home_detail.screen.dart b/stayzi_ui/lib/screens/favorite/favorite_home_detail.screen.dart
index 27df71c..a5499ef 100644
--- a/stayzi_ui/lib/screens/favorite/favorite_home_detail.screen.dart
+++ b/stayzi_ui/lib/screens/favorite/favorite_home_detail.screen.dart
@@ -48,8 +48,7 @@ class FavoriteHomeDetailScreen extends StatelessWidget {
               padding: EdgeInsets.all(16.0),
               child: Text(
                 'Bu ilana ait fotoğraf bulunmamaktadır.',
-                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500,
-                ),
+                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
               ),
             ),
           ),
@@ -74,9 +73,12 @@ class FavoriteHomeDetailScreen extends StatelessWidget {
             style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
           ),
         ),
-        Padding(padding: EdgeInsets.all(20), child: Yorumlar()),
+        Padding(
+          padding: EdgeInsets.all(20),
+          child: Yorumlar(listingId: ilan['id']),
+        ),
         Divider(thickness: 1, color: Colors.grey, endIndent: 20, indent: 20),
-        OlanaklarVeKurallar(),
+        OlanaklarVeKurallar(listing: ilan),
         const SizedBox(height: 100),
       ],
     );
diff --git a/stayzi_ui/lib/screens/myHomes/add_home_screen.dart b/stayzi_ui/lib/screens/myHomes/add_home_screen.dart
index 5dcb16c..eb0176a 100644
--- a/stayzi_ui/lib/screens/myHomes/add_home_screen.dart
+++ b/stayzi_ui/lib/screens/myHomes/add_home_screen.dart
@@ -1,6 +1,7 @@
 import 'dart:io';
 
 import 'package:flutter/material.dart';
+import 'package:geocoding/geocoding.dart';
 import 'package:image_picker/image_picker.dart';
 
 import '../../services/api_service.dart';
@@ -20,10 +21,10 @@ class _AddHomeScreenState extends State<AddHomeScreen> {
   final TextEditingController _priceController = TextEditingController();
   final TextEditingController _capacityController = TextEditingController();
   final TextEditingController _homeRulesController = TextEditingController();
-  
-  List<File> _selectedImages = [];
+
+  final List<File> _selectedImages = [];
   File? _selectedImage;
-  List<String> _selectedAmenities = [];
+  final List<String> _selectedAmenities = [];
   bool _isLoading = false;
   String? _error;
   String? _success;
@@ -35,7 +36,7 @@ class _AddHomeScreenState extends State<AddHomeScreen> {
     'Çamaşır Makinesi',
     'Bulaşık Makinesi',
     'TV',
-    'Parking',
+    'Otopark',
     'Balkon',
     'Bahçe',
     'Havuz',
@@ -73,12 +74,13 @@ class _AddHomeScreenState extends State<AddHomeScreen> {
     });
   }
 
-  void _toggleAmenity(String amenity) {
+  void _toggleAmenity(String amenityName) {
     setState(() {
-      if (_selectedAmenities.contains(amenity)) {
-        _selectedAmenities.remove(amenity);
+      final index = _selectedAmenities.indexWhere((a) => a == amenityName);
+      if (index >= 0) {
+        _selectedAmenities.removeAt(index);
       } else {
-        _selectedAmenities.add(amenity);
+        _selectedAmenities.add(amenityName);
       }
     });
   }
@@ -106,6 +108,20 @@ class _AddHomeScreenState extends State<AddHomeScreen> {
       final price = double.parse(_priceController.text.trim());
       final capacity = int.tryParse(_capacityController.text.trim());
 
+      double? lat;
+      double? lng;
+      try {
+        List<Location> locations = await locationFromAddress(
+          _locationController.text.trim(),
+        );
+        if (locations.isNotEmpty) {
+          lat = locations.first.latitude;
+          lng = locations.first.longitude;
+        }
+      } catch (e) {
+        print("Konumdan koordinatlar alınamadı: $e");
+      }
+
       await ApiService().createListing(
         title: _titleController.text.trim(),
         description:
@@ -118,8 +134,20 @@ class _AddHomeScreenState extends State<AddHomeScreen> {
                 : _locationController.text.trim(),
         price: price,
         capacity: capacity,
-        amenities: _selectedAmenities.isNotEmpty ? _selectedAmenities : null,
+        amenities:
+            _selectedAmenities.isNotEmpty
+                ? _selectedAmenities.map((name) {
+                  final amenityIndex = _availableAmenities.indexOf(name);
+                  return {"id": amenityIndex + 1, "name": name};
+                }).toList()
+                : null,
         photo: _selectedImage,
+        homeRules:
+            _homeRulesController.text.trim().isEmpty
+                ? null
+                : _homeRulesController.text.trim(),
+        lat: lat,
+        lng: lng,
       );
 
       setState(() {
@@ -388,7 +416,7 @@ class _AddHomeScreenState extends State<AddHomeScreen> {
                                     ),
                                   ),
                                 ),
-                              
+
                                 const SizedBox(height: 24),
 
                                 // Basic Information
@@ -401,7 +429,7 @@ class _AddHomeScreenState extends State<AddHomeScreen> {
                                   ),
                                 ),
                                 const SizedBox(height: 16),
-                              
+
                                 _buildTextField(
                                   controller: _titleController,
                                   label: 'Başlık *',
@@ -422,14 +450,14 @@ class _AddHomeScreenState extends State<AddHomeScreen> {
                                   maxLines: 3,
                                 ),
                                 const SizedBox(height: 16),
-                              
+
                                 _buildTextField(
                                   controller: _locationController,
                                   label: 'Konum',
                                   hint: 'Şehir, mahalle',
                                 ),
                                 const SizedBox(height: 16),
-                              
+
                                 _buildTextField(
                                   controller: _priceController,
                                   label: 'Fiyat (₺/gece) *',
@@ -499,9 +527,9 @@ class _AddHomeScreenState extends State<AddHomeScreen> {
                                         );
                                       }).toList(),
                                 ),
-                              
+
                                 const SizedBox(height: 24),
-                              
+
                                 // House Rules
                                 _buildTextField(
                                   controller: _homeRulesController,
diff --git a/stayzi_ui/lib/screens/myHomes/my_homes_screen.dart b/stayzi_ui/lib/screens/myHomes/my_homes_screen.dart
index 45e897b..a331995 100644
--- a/stayzi_ui/lib/screens/myHomes/my_homes_screen.dart
+++ b/stayzi_ui/lib/screens/myHomes/my_homes_screen.dart
@@ -1,4 +1,5 @@
 import 'package:flutter/material.dart';
+import 'package:stayzi_ui/services/api_constants.dart';
 
 import '../../models/listing_model.dart';
 import '../../services/api_service.dart';
@@ -26,20 +27,23 @@ class _MyHomesScreenState extends State<MyHomesScreen> {
   }
 
   Future<void> _loadMyListings() async {
+    if (!mounted) return;
     setState(() {
       _isLoading = true;
       _error = null;
     });
 
     try {
-      // Token'ı storage'dan al
       final token = await StorageService().getAccessToken();
       final listings = await ApiService().getMyListings(token: token);
+
+      if (!mounted) return;
       setState(() {
         _listings = listings;
         _isLoading = false;
       });
     } catch (e) {
+      if (!mounted) return;
       setState(() {
         _error = 'İlanlarınız yüklenemedi: $e';
         _isLoading = false;
@@ -161,6 +165,7 @@ class _MyHomesScreenState extends State<MyHomesScreen> {
             context,
             MaterialPageRoute(builder: (context) => const AddHomeScreen()),
           );
+          if (!mounted) return;
           if (result == true) {
             _loadMyListings();
           }
@@ -184,11 +189,7 @@ class _MyHomesScreenState extends State<MyHomesScreen> {
               color: Colors.grey[100],
               borderRadius: BorderRadius.circular(50),
             ),
-            child: Icon(
-              Icons.home_outlined,
-              size: 64,
-              color: Colors.grey[600],
-            ),
+            child: Icon(Icons.home_outlined, size: 64, color: Colors.grey[600]),
           ),
           const SizedBox(height: 24),
           const Text(
@@ -212,6 +213,7 @@ class _MyHomesScreenState extends State<MyHomesScreen> {
                 context,
                 MaterialPageRoute(builder: (context) => const AddHomeScreen()),
               );
+              if (!mounted) return;
               if (result == true) {
                 _loadMyListings();
               }
@@ -247,7 +249,7 @@ class _MyHomesScreenState extends State<MyHomesScreen> {
   Widget _buildListingCard(Listing listing) {
     final imageUrl =
         listing.imageUrls != null && listing.imageUrls!.isNotEmpty
-            ? listing.imageUrls!.first
+            ? '${ApiConstants.baseUrl.replaceFirst(RegExp(r'/$'), '')}/${listing.imageUrls!.first.replaceFirst(RegExp(r'^/'), '')}'
             : 'https://via.placeholder.com/150';
 
     return Material(
@@ -276,7 +278,7 @@ class _MyHomesScreenState extends State<MyHomesScreen> {
                           scrollController: scrollController,
                         ),
                       ),
-            ),
+                ),
           );
         },
         child: Card(
@@ -518,7 +520,7 @@ class _MyHomesScreenState extends State<MyHomesScreen> {
                                                       scrollController,
                                                 ),
                                               ),
-                                ),
+                                    ),
                               );
                             },
                             style: ElevatedButton.styleFrom(
diff --git a/stayzi_ui/lib/screens/payment/payment_screen.dart b/stayzi_ui/lib/screens/payment/payment_screen.dart
index bc0ebf9..b81502d 100644
--- a/stayzi_ui/lib/screens/payment/payment_screen.dart
+++ b/stayzi_ui/lib/screens/payment/payment_screen.dart
@@ -1,13 +1,26 @@
 import 'package:flutter/material.dart';
+import 'package:stayzi_ui/screens/detail/detail_scren.dart';
 import 'package:stayzi_ui/screens/onboard/widgets/basic_button.dart';
 import 'package:stayzi_ui/screens/payment/payment_details.dart';
 import 'package:stayzi_ui/screens/payment/payment_form.dart';
 
 class PaymentScreen extends StatelessWidget {
-  const PaymentScreen({super.key});
+  final DateTimeRange selectedRange;
+  final Map<String, dynamic> listing;
+
+  const PaymentScreen({
+    super.key,
+    required this.selectedRange,
+    required this.listing,
+  });
 
   @override
   Widget build(BuildContext context) {
+    final int totalNights = selectedRange.duration.inDays;
+    final double nightlyPrice = (listing['price'] ?? 0).toDouble();
+    final double amount = nightlyPrice * totalNights;
+    const double tax = 500;
+
     return Scaffold(
       appBar: AppBar(title: const Text("Ödeme")),
       body: SingleChildScrollView(
@@ -15,35 +28,54 @@ class PaymentScreen extends StatelessWidget {
         child: Column(
           crossAxisAlignment: CrossAxisAlignment.start,
           children: [
-            const PaymentDetails(
-              tax: 500,
-              amount: 2500,
-              totalNights: 5,
-            ), // Ödeme özeti kartı
+            PaymentDetails(tax: tax, amount: amount, totalNights: totalNights),
             const SizedBox(height: 20),
             const Text(
               "Kart Bilgileri",
               style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
             ),
             const SizedBox(height: 12),
-            const CreditCardInfo(), // Form alanları (ad, kart numarası vs)
+            const CreditCardInfo(),
             const SizedBox(height: 30),
-            SizedBox(
-              width: double.infinity,
-              height: 50,
-              child: ElevatedButtonWidget(
-                buttonText: "Ödemeyi Tamamla",
-                buttonColor: Colors.black,
-                textColor: Colors.white,
-                onPressed: () {
-                  Navigator.push(
-                    context,
-                    MaterialPageRoute(
-                      builder: (context) => const PaymentSuccessScreen(),
-                    ),
-                  );
-                },
-              ),
+            Column(
+              children: [
+                SizedBox(
+                  width: double.infinity,
+                  height: 50,
+                  child: ElevatedButtonWidget(
+                    buttonText: "Ödemeyi Tamamla",
+                    buttonColor: Colors.black,
+                    textColor: Colors.white,
+                    onPressed: () {
+                      Navigator.push(
+                        context,
+                        MaterialPageRoute(
+                          builder: (context) => const PaymentSuccessScreen(),
+                        ),
+                      );
+                    },
+                  ),
+                ),
+                SizedBox(height: 10),
+                SizedBox(
+                  width: double.infinity,
+                  height: 50,
+                  child: ElevatedButtonWidget(
+                    buttonText: "Rezervasyonu İptal Et",
+                    buttonColor: const Color.fromRGBO(213, 56, 88, 1),
+                    textColor: Colors.white,
+                    onPressed: () {
+                      Navigator.pushReplacement(
+                        context,
+                        MaterialPageRoute(
+                          builder:
+                              (context) => ListingDetailPage(listing: listing),
+                        ),
+                      );
+                    },
+                  ),
+                ),
+              ],
             ),
           ],
         ),
diff --git a/stayzi_ui/lib/screens/search/search_screen.dart b/stayzi_ui/lib/screens/search/search_screen.dart
index 4ee67d7..4cbbf73 100644
--- a/stayzi_ui/lib/screens/search/search_screen.dart
+++ b/stayzi_ui/lib/screens/search/search_screen.dart
@@ -71,10 +71,14 @@ class _TinyHomeCardState extends State<TinyHomeCard> {
   @override
   Widget build(BuildContext context) {
     final listing = widget.listing;
-    final imageUrl =
+    final rawUrl =
         (listing['image_urls'] as List<dynamic>).isNotEmpty
             ? listing['image_urls'][0]
-            : 'https://via.placeholder.com/150';
+            : null;
+    final imageUrl =
+        (rawUrl != null && rawUrl.startsWith('http'))
+            ? rawUrl
+            : 'http://localhost:8000$rawUrl';
 
     return Material(
       child: InkWell(
diff --git a/stayzi_ui/lib/services/api_constants.dart b/stayzi_ui/lib/services/api_constants.dart
index ef9bcc6..2f8473d 100644
--- a/stayzi_ui/lib/services/api_constants.dart
+++ b/stayzi_ui/lib/services/api_constants.dart
@@ -1,7 +1,7 @@
 class ApiConstants {
   // Base URL for the FastAPI backend
-  static const String baseUrl = 'http://10.0.2.2:8000'; // For Android emulator
-  // static const String baseUrl = 'http://localhost:8000'; // For iOS simulator
+  //static const String baseUrl = 'http://10.0.2.2:8000'; // For Android emulator
+  static const String baseUrl = 'http://localhost:8000'; // For iOS simulator
   // static const String baseUrl = 'http://your-server-ip:8000'; // For physical device
   // static const String baseUrl = 'http://192.168.1.125:8000';
 
diff --git a/stayzi_ui/lib/services/api_service.dart b/stayzi_ui/lib/services/api_service.dart
index ca4ac56..3587e91 100644
--- a/stayzi_ui/lib/services/api_service.dart
+++ b/stayzi_ui/lib/services/api_service.dart
@@ -1,7 +1,12 @@
 import 'dart:convert';
 import 'dart:io';
 
+import 'package:flutter/material.dart';
 import 'package:http/http.dart' as http;
+import 'package:stayzi_ui/models/review_model.dart';
+import 'package:stayzi_ui/services/storage_service.dart';
+
+//import 'package:stayzi_ui/screens/detail/review_detail_page.dart';
 
 import '../models/auth_model.dart';
 import '../models/favorite_model.dart';
@@ -53,7 +58,7 @@ class ApiService {
 
   // Handle HTTP response
   dynamic _handleResponse(http.Response response) {
-    print("DEBUG: _handleResponse çağrıldı, body: " + response.body);
+    print("DEBUG: _handleResponse çağrıldı, body: ${response.body}");
     final data = json.decode(response.body);
     if (data is Map && data['detail'] != null) {
       throw Exception(data['detail']);
@@ -61,9 +66,7 @@ class ApiService {
     if (data is Map || data is List) {
       return data;
     }
-    throw Exception(
-      'Beklenmeyen response tipi: ' + data.runtimeType.toString(),
-    );
+    throw Exception('Beklenmeyen response tipi: ${data.runtimeType}');
   }
 
   // Test connection
@@ -236,7 +239,9 @@ class ApiService {
   Future<User> getUserById(int userId) async {
     try {
       final response = await http.get(
-        Uri.parse('${ApiConstants.baseUrl}${ApiConstants.userById}$userId'),
+        Uri.parse(
+          '${ApiConstants.baseUrl}${ApiConstants.userById}$userId/with-host',
+        ),
         headers: _getHeaders(requiresAuth: true),
       );
       final data = _handleResponse(response);
@@ -295,9 +300,22 @@ class ApiService {
     }
   }
 
+  Future<Listing> getListingWithHostById(int listingId) async {
+    final response = await http.get(
+      Uri.parse('${ApiConstants.baseUrl}/listings/$listingId/with-host'),
+      headers: {'Content-Type': 'application/json'},
+    );
 
+    print("🔗 URL: ${ApiConstants.baseUrl}/listings/$listingId/with-host");
+    print("📡 Status Code: ${response.statusCode}");
+    print("📥 Body: ${response.body}");
 
-
+    if (response.statusCode == 200) {
+      return Listing.fromJson(jsonDecode(response.body));
+    } else {
+      throw Exception('Host bilgisi alınamadı');
+    }
+  }
 
   // Delete listing
   Future<void> deleteListing(int id) async {
@@ -443,15 +461,18 @@ class ApiService {
 
   // Get user's own listings
   Future<List<Listing>> getMyListings({String? token}) async {
-    print('getMyListings çağrıldı, token: ' + (token ?? 'YOK'));
+    print('getMyListings çağrıldı, token: ${token ?? 'YOK'}');
+
     final response = await http.get(
-      Uri.parse('http://10.0.2.2:8000/listings/my-listings'),
+      Uri.parse('${ApiConstants.baseUrl}/listings/my-listings'),
       headers: {
         if (token != null) 'Authorization': 'Bearer $token',
         'Content-Type': 'application/json',
       },
     );
+
     print('getMyListings response status: ${response.statusCode}');
+
     if (response.statusCode == 200) {
       final List<dynamic> data = json.decode(response.body);
       print('getMyListings tamamlandı, ilan sayısı: ${data.length}');
@@ -484,6 +505,7 @@ class ApiService {
 
   // ========== LISTING IMAGES ENDPOINTS ==========
 
+  // Upload listing image
   // Upload listing image
   Future<String> uploadListingImage(int listingId, File image) async {
     try {
@@ -500,6 +522,11 @@ class ApiService {
       final streamedResponse = await request.send();
       final response = await http.Response.fromStream(streamedResponse);
       final data = _handleResponse(response);
+
+      // ✅ Gelen cevabı kontrol et
+      print("📸 uploadListingImage response: $data");
+      print("✅ image_url: ${data['image_url']}");
+
       return data['image_url'] ?? '';
     } catch (e) {
       throw Exception('İlan fotoğrafı yüklenemedi: $e');
@@ -538,7 +565,7 @@ class ApiService {
     List<String>? hostLanguages,
     String? homeRules,
     int? capacity,
-    List<String>? amenities,
+    List<Map<String, dynamic>>? amenities,
     File? photo,
   }) async {
     try {
@@ -563,7 +590,9 @@ class ApiService {
       }
 
       if (amenities != null) {
-        request.fields['amenities'] = json.encode(amenities);
+        final serializedAmenities =
+            amenities.map((a) => {"id": a["id"], "name": a["name"]}).toList();
+        request.fields['amenities'] = json.encode(serializedAmenities);
       }
 
       if (photo != null) {
@@ -731,6 +760,71 @@ class ApiService {
     }
   }
 
+  // Fetch reviews for a listing
+  Future<List<Review>> fetchReviews(int listingId) async {
+    try {
+      final uri = Uri.parse(
+        '${ApiConstants.baseUrl}/reviews/listing/$listingId',
+      );
+      final headers = _getHeaders(requiresAuth: true);
+
+      final response = await http.get(uri, headers: headers);
+
+      if (response.statusCode == 200) {
+        final List<dynamic> jsonList = json.decode(response.body);
+        final reviews = jsonList.map((item) => Review.fromJson(item)).toList();
+        print("✅ ${reviews.length} yorum başarıyla alındı.");
+        return reviews;
+      } else {
+        print(
+          "❌ Yorumlar alınamadı: ${response.statusCode} - ${response.body}",
+        );
+        throw Exception('Yorumlar alınamadı: ${response.statusCode}');
+      }
+    } catch (e) {
+      print("❌ Yorumlar alınırken hata oluştu: $e");
+      throw Exception('Yorumlar alınırken hata oluştu: $e');
+    }
+  }
+
+  Future<bool> postReview({
+    required int listingId,
+    required double rating,
+    required String comment,
+  }) async {
+    final token = await StorageService().getToken();
+    if (token == null || token.accessToken.isEmpty) {
+      debugPrint("❌ Token bulunamadı, yorum gönderilemez.");
+      return false;
+    }
+
+    final url = Uri.parse('${ApiConstants.baseUrl}/reviews/');
+    final headers = {
+      'Content-Type': 'application/json',
+      'Authorization': 'Bearer ${token.accessToken}',
+    };
+    final body = jsonEncode({
+      "listing_id": listingId,
+      "rating": rating,
+      "comment": comment,
+    });
+
+    try {
+      final response = await http.post(url, headers: headers, body: body);
+      debugPrint(
+        "📨 postReview yanıtı: ${response.statusCode} - ${response.body}",
+      );
+      if (response.statusCode == 200 || response.statusCode == 201) {
+        return true;
+      } else {
+        return false;
+      }
+    } catch (e) {
+      debugPrint("🚨 postReview hatası: $e");
+      return false;
+    }
+  }
+
   /// Standardizes phone number format by combining country code and phone number
   /// Example: country="+90", phone="5551234567" -> "+905551234567"
   static String standardizePhoneNumber(String country, String phone) {
diff --git a/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/file_selector_linux b/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/file_selector_linux
index 08b8e5d..3e23f70 120000
--- a/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/file_selector_linux
+++ b/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/file_selector_linux
@@ -1 +1 @@
-C:/Users/Ahmet Koca/AppData/Local/Pub/Cache/hosted/pub.dev/file_selector_linux-0.9.3+2/
\ No newline at end of file
+/Users/omerfarukyilmaz/.pub-cache/hosted/pub.dev/file_selector_linux-0.9.3+2/
\ No newline at end of file
diff --git a/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/geolocator_linux b/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/geolocator_linux
index 92d88e0..d9c0427 120000
--- a/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/geolocator_linux
+++ b/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/geolocator_linux
@@ -1 +1 @@
-C:/Users/Ahmet Koca/AppData/Local/Pub/Cache/hosted/pub.dev/geolocator_linux-0.2.3/
\ No newline at end of file
+/Users/omerfarukyilmaz/.pub-cache/hosted/pub.dev/geolocator_linux-0.2.3/
\ No newline at end of file
diff --git a/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/image_picker_linux b/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/image_picker_linux
index a366694..2461103 120000
--- a/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/image_picker_linux
+++ b/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/image_picker_linux
@@ -1 +1 @@
-C:/Users/Ahmet Koca/AppData/Local/Pub/Cache/hosted/pub.dev/image_picker_linux-0.2.1+2/
\ No newline at end of file
+/Users/omerfarukyilmaz/.pub-cache/hosted/pub.dev/image_picker_linux-0.2.1+2/
\ No newline at end of file
diff --git a/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/package_info_plus b/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/package_info_plus
index 717b7bc..6378f55 120000
--- a/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/package_info_plus
+++ b/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/package_info_plus
@@ -1 +1 @@
-C:/Users/Ahmet Koca/AppData/Local/Pub/Cache/hosted/pub.dev/package_info_plus-8.3.0/
\ No newline at end of file
+/Users/omerfarukyilmaz/.pub-cache/hosted/pub.dev/package_info_plus-8.3.0/
\ No newline at end of file
diff --git a/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/path_provider_linux b/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/path_provider_linux
index a407802..80bfdb7 120000
--- a/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/path_provider_linux
+++ b/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/path_provider_linux
@@ -1 +1 @@
-C:/Users/Ahmet Koca/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_linux-2.2.1/
\ No newline at end of file
+/Users/omerfarukyilmaz/.pub-cache/hosted/pub.dev/path_provider_linux-2.2.1/
\ No newline at end of file
diff --git a/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/shared_preferences_linux b/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/shared_preferences_linux
index e8478c8..0e110d7 120000
--- a/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/shared_preferences_linux
+++ b/stayzi_ui/linux/flutter/ephemeral/.plugin_symlinks/shared_preferences_linux
@@ -1 +1 @@
-C:/Users/Ahmet Koca/AppData/Local/Pub/Cache/hosted/pub.dev/shared_preferences_linux-2.4.1/
\ No newline at end of file
+/Users/omerfarukyilmaz/.pub-cache/hosted/pub.dev/shared_preferences_linux-2.4.1/
\ No newline at end of file
diff --git a/stayzi_ui/pubspec.lock b/stayzi_ui/pubspec.lock
index ff0c76e..3cad7b2 100644
--- a/stayzi_ui/pubspec.lock
+++ b/stayzi_ui/pubspec.lock
@@ -214,6 +214,14 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "2.0.28"
+  flutter_rating_bar:
+    dependency: "direct main"
+    description:
+      name: flutter_rating_bar
+      sha256: d2af03469eac832c591a1eba47c91ecc871fe5708e69967073c043b2d775ed93
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.0.1"
   flutter_test:
     dependency: "direct dev"
     description: flutter
@@ -232,6 +240,38 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "0.1.1"
+  geocoding:
+    dependency: "direct main"
+    description:
+      name: geocoding
+      sha256: "606be036287842d779d7ec4e2f6c9435fc29bbbd3c6da6589710f981d8852895"
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.0.0"
+  geocoding_android:
+    dependency: transitive
+    description:
+      name: geocoding_android
+      sha256: ba810da90d6633cbb82bbab630e5b4a3b7d23503263c00ae7f1ef0316dcae5b9
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.0.1"
+  geocoding_ios:
+    dependency: transitive
+    description:
+      name: geocoding_ios
+      sha256: "18ab1c8369e2b0dcb3a8ccc907319334f35ee8cf4cfef4d9c8e23b13c65cb825"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.1.0"
+  geocoding_platform_interface:
+    dependency: transitive
+    description:
+      name: geocoding_platform_interface
+      sha256: "8c2c8226e5c276594c2e18bfe88b19110ed770aeb7c1ab50ede570be8b92229b"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.2.0"
   geolocator:
     dependency: "direct main"
     description:
diff --git a/stayzi_ui/pubspec.yaml b/stayzi_ui/pubspec.yaml
index a7c54a7..253629b 100644
--- a/stayzi_ui/pubspec.yaml
+++ b/stayzi_ui/pubspec.yaml
@@ -17,6 +17,8 @@ dependencies:
   flutter_map: ^8.2.1
   latlong2: ^0.9.1
   geolocator: ^14.0.2
+  flutter_rating_bar: ^4.0.1
+  geocoding: ^4.0.0
 
 dev_dependencies:
   flutter_test:
